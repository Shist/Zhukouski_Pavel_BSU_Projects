# coding: utf-8

"""
    Robot API

    Robot REST API  # noqa: E501

    OpenAPI spec version: 1.8.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pdhttp.api_client import ApiClient


class ToolApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def change_tool_info(self, body, **kwargs):  # noqa: E501
        """Setting tool properties  # noqa: E501

        The function enables setting new TCP to account for the properties of an attached or changed work tool. The tool properties define the following:  - _name_ - any random name of the work tool defined by the user (e.g., \\\"gripper\\\")  - _position_ - a set of x, y, and z coordinates and rotation angles - _roll_, _pitch_, and _yaw_. The coordinates define the actual distance (in meters) from the arm's zero point to the new TCP along the x, y, and z axes accordingly. _Roll_ stands for the rotation angle of the new TCP around the x axis; _pitch_ - the rotation angle around the y axis; _yaw_ - the rotation angle of the new TCP around the z axis. All rotation angles are in radians.  - _radius_ - radius of the work tool (in meters) measured from its physical center point.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_tool_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ToolInfo body: Request Body (required)
        :return: ToolInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_tool_info_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.change_tool_info_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def change_tool_info_with_http_info(self, body, **kwargs):  # noqa: E501
        """Setting tool properties  # noqa: E501

        The function enables setting new TCP to account for the properties of an attached or changed work tool. The tool properties define the following:  - _name_ - any random name of the work tool defined by the user (e.g., \\\"gripper\\\")  - _position_ - a set of x, y, and z coordinates and rotation angles - _roll_, _pitch_, and _yaw_. The coordinates define the actual distance (in meters) from the arm's zero point to the new TCP along the x, y, and z axes accordingly. _Roll_ stands for the rotation angle of the new TCP around the x axis; _pitch_ - the rotation angle around the y axis; _yaw_ - the rotation angle of the new TCP around the z axis. All rotation angles are in radians.  - _radius_ - radius of the work tool (in meters) measured from its physical center point.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_tool_info_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ToolInfo body: Request Body (required)
        :return: ToolInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_tool_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_tool_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tool/info', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ToolInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_tool_shape(self, body, **kwargs):  # noqa: E501
        """Setting tool shape  # noqa: E501

        The function sets new form of the working tool of the robot, which participates in the calculation of collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_tool_shape(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ToolShape body: Request Body (required)
        :return: ToolShape
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_tool_shape_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.change_tool_shape_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def change_tool_shape_with_http_info(self, body, **kwargs):  # noqa: E501
        """Setting tool shape  # noqa: E501

        The function sets new form of the working tool of the robot, which participates in the calculation of collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_tool_shape_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ToolShape body: Request Body (required)
        :return: ToolShape
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_tool_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_tool_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tool/shape', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ToolShape',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tool_info(self, **kwargs):  # noqa: E501
        """Getting actual tool properties  # noqa: E501

        The function returns the actual TCP position that accounts for the offset from the original TCP due to attaching/changing the work tool. The actual TCP position is described as a set of the following properties:  - _name_ - any random name of the work tool defined by the user (e.g., \\\"gripper\\\")  - _position_ - x, y, and z coordinates, as well as _roll_, _pitch_, and _yaw_ rotation angles.   The coordinates define the distance (in meters) from the arm's zero point   to the actual TCP along the x, y, and z axes accordingly.   _Roll_ stands for the actual TCP rotation angle around the x axis;   _pitch_ - the actual TCP rotation angle around the y axis;   _yaw_ - the actual TCP rotation angle around the z axis. All rotation angles are in radians.    - _radius_ - radius of the work tool (in meters) measured from its center point.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tool_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ToolInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tool_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tool_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tool_info_with_http_info(self, **kwargs):  # noqa: E501
        """Getting actual tool properties  # noqa: E501

        The function returns the actual TCP position that accounts for the offset from the original TCP due to attaching/changing the work tool. The actual TCP position is described as a set of the following properties:  - _name_ - any random name of the work tool defined by the user (e.g., \\\"gripper\\\")  - _position_ - x, y, and z coordinates, as well as _roll_, _pitch_, and _yaw_ rotation angles.   The coordinates define the distance (in meters) from the arm's zero point   to the actual TCP along the x, y, and z axes accordingly.   _Roll_ stands for the actual TCP rotation angle around the x axis;   _pitch_ - the actual TCP rotation angle around the y axis;   _yaw_ - the actual TCP rotation angle around the z axis. All rotation angles are in radians.    - _radius_ - radius of the work tool (in meters) measured from its center point.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tool_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ToolInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tool_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tool/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ToolInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tool_shape(self, **kwargs):  # noqa: E501
        """Getting tool shape  # noqa: E501

        The function returns the form of the working tool of the robot,  which participates in the calculation of collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tool_shape(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ToolShape
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tool_shape_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tool_shape_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tool_shape_with_http_info(self, **kwargs):  # noqa: E501
        """Getting tool shape  # noqa: E501

        The function returns the form of the working tool of the robot,  which participates in the calculation of collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tool_shape_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ToolShape
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tool_shape" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tool/shape', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ToolShape',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
