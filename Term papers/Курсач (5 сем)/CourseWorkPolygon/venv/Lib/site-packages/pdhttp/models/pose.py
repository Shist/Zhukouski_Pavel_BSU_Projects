# coding: utf-8

"""
    Robot API

    Robot REST API  # noqa: E501

    OpenAPI spec version: 1.8.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Pose(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'angles': 'list[float]',
        'blend': 'float',
        'actions': 'list[object]'
    }

    attribute_map = {
        'angles': 'angles',
        'blend': 'blend',
        'actions': 'actions'
    }

    def __init__(self, angles=None, blend=0.0, actions=None):  # noqa: E501
        """Pose - a model defined in Swagger"""  # noqa: E501

        self._angles = None
        self._blend = None
        self._actions = None
        self.discriminator = None

        if angles is not None:
            self.angles = angles
        if blend is not None:
            self.blend = blend
        if actions is not None:
            self.actions = actions

    @property
    def angles(self):
        """Gets the angles of this Pose.  # noqa: E501

        (in degrees)  # noqa: E501

        :return: The angles of this Pose.  # noqa: E501
        :rtype: list[float]
        """
        return self._angles

    @angles.setter
    def angles(self, angles):
        """Sets the angles of this Pose.

        (in degrees)  # noqa: E501

        :param angles: The angles of this Pose.  # noqa: E501
        :type: list[float]
        """

        self._angles = angles

    @property
    def blend(self):
        """Gets the blend of this Pose.  # noqa: E501


        :return: The blend of this Pose.  # noqa: E501
        :rtype: float
        """
        return self._blend

    @blend.setter
    def blend(self, blend):
        """Sets the blend of this Pose.


        :param blend: The blend of this Pose.  # noqa: E501
        :type: float
        """
        if blend is not None and blend < 0:  # noqa: E501
            raise ValueError("Invalid value for `blend`, must be a value greater than or equal to `0`")  # noqa: E501

        self._blend = blend

    @property
    def actions(self):
        """Gets the actions of this Pose.  # noqa: E501


        :return: The actions of this Pose.  # noqa: E501
        :rtype: list[object]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Pose.


        :param actions: The actions of this Pose.  # noqa: E501
        :type: list[object]
        """

        self._actions = actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pose, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pose):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
