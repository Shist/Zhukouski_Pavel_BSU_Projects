# coding: utf-8

"""
    Robot API

    Robot REST API  # noqa: E501

    OpenAPI spec version: 1.8.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pdhttp.models.robot_action import RobotAction  # noqa: F401,E501
from pdhttp.models.robot_action_type import RobotActionType  # noqa: F401,E501


class OutputRobotAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target': 'RobotActionType',
        'port': 'float',
        'value': 'str'
    }

    attribute_map = {
        'target': 'target',
        'port': 'port',
        'value': 'value'
    }

    def __init__(self, target=None, port=None, value=None):  # noqa: E501
        """OutputRobotAction - a model defined in Swagger"""  # noqa: E501

        self._target = None
        self._port = None
        self._value = None
        self.discriminator = None

        if target is not None:
            self.target = target
        if port is not None:
            self.port = port
        if value is not None:
            self.value = value

    @property
    def target(self):
        """Gets the target of this OutputRobotAction.  # noqa: E501


        :return: The target of this OutputRobotAction.  # noqa: E501
        :rtype: RobotActionType
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this OutputRobotAction.


        :param target: The target of this OutputRobotAction.  # noqa: E501
        :type: RobotActionType
        """

        self._target = target

    @property
    def port(self):
        """Gets the port of this OutputRobotAction.  # noqa: E501


        :return: The port of this OutputRobotAction.  # noqa: E501
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OutputRobotAction.


        :param port: The port of this OutputRobotAction.  # noqa: E501
        :type: float
        """
        if port is not None and port > 2:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `2`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def value(self):
        """Gets the value of this OutputRobotAction.  # noqa: E501


        :return: The value of this OutputRobotAction.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OutputRobotAction.


        :param value: The value of this OutputRobotAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIGH", "LOW"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"  # noqa: E501
                .format(value, allowed_values)
            )

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutputRobotAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutputRobotAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
