//Вариант 16
#include <iostream>
using namespace std;

template<typename T>
void Flag_Bubble_Sort(T* arr, int size)
{ // Обычная сортировка пузырьком с флажком
	bool check = false;
	for (int i = 0; i < size - 1; i++)
	{
		for (int j = 0; j < size - i - 1; j++)
			if (arr[j] < arr[j + 1])
				continue;
			else
			{
				swap(arr[j], arr[j + 1]);
				check = true;
			}
		if (!check)
			break;
	}
}

int main()
{
	setlocale(LC_ALL, "Rus"); // Ввод возможности писать кириллицей.
	int n;
	//int g = 0;
	double k = 1., p = 0.;
	cout << "Введите количество элементов в массиве\n";
	cin >> n;
	if (n < 1 || n > 100000000) // Защита от дурака.
	{
		cout << "Невозможно расчитать. Введенное количество элементов или слишком большое, или некорректное.\n";
	}
	else
	{
		double *mas = new double[n]; // Ввод массива.
		for (int curr = 0; curr < n; curr++)
		{
			cout << "Введите " << curr + 1<< "-ый элемент массива:\n";
			cin >> mas[curr];
			if (mas[curr] > 0)
			{
				k = k * mas[curr]; // Расчитываем произведение положительных элементов массива.
				p++; // Данная переменная введена для того, чтобы проверить, есть ли в массиве положительные элементы вообще.
			}
		}
		if (p == 0.) // Если среди элементов нет положительных, ты выводим сообщение об этом и о том, что произведение расчитано быть не может.
		{
			cout << "Внимание! В массиве не обнаружено положительных элементов. Произведение положительных элементов расчитано не будет, так как их нет\n";
		}
		else
		{
			cout << "Произведение положительных элементов массива равно " << k << endl; // Выводим произведение положительных элементов массива.
		}
		double min_curr = mas[0], sum = 0;
		for (int curr = 0; curr < n; curr++)
		{
			if (mas[curr] < min_curr)
			{
				min_curr = mas[curr]; // Находим первый минимальный элемент массива.
			}
		}
		if (min_curr == mas[0]) // Если первым минимальным элементом массива является первый элемент, выводим соответствующее сообщение.
		{
			cout << "Внимание! Первый минимальный элемент массива располагается в самом начале. Соответственноно, сумма элементов до него будет равна нулю!\n"; // В этом случае сумма всех элементов до первого минимального элемента будет равна нулю.
		}
		else
		{
			for (int curr = 0; mas[curr] > min_curr; curr++)
			{
				sum = sum + mas[curr]; // Расчитываем сумму всех элементов до первого минимального.
			}
			cout << "Первый минимальный элемент массива равен " << min_curr << endl; // Выводим, какой элемент массива является первым минимальным.
			cout << "Сумма элементов, располагающихся до первого минимального элемента, равна " << sum << endl; // Выводим сумму всех элементов до первого минимального элемента.
		}
		Flag_Bubble_Sort(mas, n);
		//for (int curr = 1; curr < n - 1; curr += 2)  // Сортировка нечетных элементов массива пузырьком.
		//{
		//	for (int j = 1; j < n - curr - 1; j += 2)
		//	{
		//		if (mas[j] < mas[j + 2])
		//		{
		//			continue;
		//		}
		//		else
		//		{
		//			swap(mas[j], mas[j + 2]); // меняем нечетные элементы местами
		//			g++;
		//		}
		//	}
		//	if (g == 0)
		//	{
		//		break;
		//	}
		//}
		//for (int curr = 0; curr < n - 2; curr += 2)  // Сортировка четных элементов массива пузырьком.
		//{
		//	for (int j = 0; j < n - curr - 2; j += 2)
		//	{
		//		if (mas[j] < mas[j + 2])
		//		{
		//			continue;
		//		}
		//		else
		//		{
		//			swap(mas[j], mas[j + 2]); // меняем четные элементы местами
		//			t++;
		//		}
		//	}
		//	if (t == 0)
		//	{
		//		break;
		//	}
		//}
		cout << "Элементы нового массива следующие: ";
		for (int curr = 0; curr < n; curr++)
		{
			cout << mas[curr] << " "; // Выводим измененный массив.
		}
		delete[] mas;
	}
	return(0);
}