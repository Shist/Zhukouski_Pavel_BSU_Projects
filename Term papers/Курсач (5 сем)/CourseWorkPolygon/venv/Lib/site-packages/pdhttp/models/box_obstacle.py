# coding: utf-8

"""
    Robot API

    Robot REST API  # noqa: E501

    OpenAPI spec version: 1.8.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pdhttp.models.point import Point  # noqa: F401,E501
from pdhttp.models.position import Position  # noqa: F401,E501


class BoxObstacle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'obstacle_type': 'str',
        'name': 'str',
        'sides': 'Point',
        'center_position': 'Position'
    }

    attribute_map = {
        'obstacle_type': 'obstacleType',
        'name': 'name',
        'sides': 'sides',
        'center_position': 'centerPosition'
    }

    def __init__(self, obstacle_type=None, name=None, sides=None, center_position=None):  # noqa: E501
        """BoxObstacle - a model defined in Swagger"""  # noqa: E501

        self._obstacle_type = None
        self._name = None
        self._sides = None
        self._center_position = None
        self.discriminator = None

        self.obstacle_type = obstacle_type
        self.name = name
        self.sides = sides
        self.center_position = center_position

    @property
    def obstacle_type(self):
        """Gets the obstacle_type of this BoxObstacle.  # noqa: E501


        :return: The obstacle_type of this BoxObstacle.  # noqa: E501
        :rtype: str
        """
        return self._obstacle_type

    @obstacle_type.setter
    def obstacle_type(self, obstacle_type):
        """Sets the obstacle_type of this BoxObstacle.


        :param obstacle_type: The obstacle_type of this BoxObstacle.  # noqa: E501
        :type: str
        """
        if obstacle_type is None:
            raise ValueError("Invalid value for `obstacle_type`, must not be `None`")  # noqa: E501
        allowed_values = ["BOX"]  # noqa: E501
        if obstacle_type not in allowed_values:
            raise ValueError(
                "Invalid value for `obstacle_type` ({0}), must be one of {1}"  # noqa: E501
                .format(obstacle_type, allowed_values)
            )

        self._obstacle_type = obstacle_type

    @property
    def name(self):
        """Gets the name of this BoxObstacle.  # noqa: E501


        :return: The name of this BoxObstacle.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BoxObstacle.


        :param name: The name of this BoxObstacle.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sides(self):
        """Gets the sides of this BoxObstacle.  # noqa: E501


        :return: The sides of this BoxObstacle.  # noqa: E501
        :rtype: Point
        """
        return self._sides

    @sides.setter
    def sides(self, sides):
        """Sets the sides of this BoxObstacle.


        :param sides: The sides of this BoxObstacle.  # noqa: E501
        :type: Point
        """
        if sides is None:
            raise ValueError("Invalid value for `sides`, must not be `None`")  # noqa: E501

        self._sides = sides

    @property
    def center_position(self):
        """Gets the center_position of this BoxObstacle.  # noqa: E501


        :return: The center_position of this BoxObstacle.  # noqa: E501
        :rtype: Position
        """
        return self._center_position

    @center_position.setter
    def center_position(self, center_position):
        """Sets the center_position of this BoxObstacle.


        :param center_position: The center_position of this BoxObstacle.  # noqa: E501
        :type: Position
        """
        if center_position is None:
            raise ValueError("Invalid value for `center_position`, must not be `None`")  # noqa: E501

        self._center_position = center_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoxObstacle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoxObstacle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
