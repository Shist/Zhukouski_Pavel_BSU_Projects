#include "Money.h"

Money::Money() // Реализация конструктора без параметров, задающего нулевое значение суммы
{
	sum = 0;
}

Money::Money(int pd, int sh, double p) // Реализация конструктора с тремя параметрами, хранящего 3 переменных (валюты)
{
	if (pd > 1000000000 || (pd == 1000000000 && (sh > 0 || p > 0))) throw exception("Error! Too big value of sum!"); // Проверка на максимальную сумму
	if (pd < 0) throw exception("Error! Entered value of pounds is negative!"); // Проверка на отрицательность фунтов
	if (sh > 19) throw exception("Error! Your value of shillings isn't smaller than 20!"); // Проверка на переполнение шиллингов
	if (sh < 0) throw exception("Error! Entered value of shillings is negative!"); // Проверка на отрицательность шиллингов
	if (p > 11.5) throw exception("Error! Your value of pences isn't smaller than 12!"); // Проверка на переполнение пенсов
	if (p < 0) throw exception("Error! Entered value of pences if negatice!"); // Проверка на отрицательность пенсов
	check = true; // Если мы идем в set-метод из конструктора, то стафим флаг на true
	set_sum(pd, sh, p, 0);
}

Money::~Money() // Виртуальный деструктор
{
}

long long Money::get_sum() const // Реализация get-метода для суммы
{
	return sum;
}

void Money::set_sum(int pd, int sh, double p, long long new_sum) // Реализация set-метода для суммы
{
	if (check) // Если мы пришли из конструктора, то...
	{
		check = false;
		sum = (long long)(2 * p) + 24 * ((long long)sh + 20 * ((long long)pd)); // Расчитываем sum, с которой будем работать во время расчетов
	}
	else // Если же мы пришли сюда от оператора некого арифметического действия, то...
	{
		sum = new_sum;
	}
	if (sum > 480000000000) throw exception("Error! Too big value of sum!"); // Проверка на максимальную сумму
	if (sum < -480000000000) throw exception("Error! Too small value of sum!"); // Проверка на минимальную сумму
}

Money Money::operator + (const Money& x) const
{
	Money X;
	X.set_sum(0, 0, 0, get_sum() + x.get_sum());
	return X; // Сложение
}

Money Money::operator - (const Money& x) const
{
	Money X;
	X.set_sum(0, 0, 0, get_sum() - x.get_sum());
	return X; // Вычитание
}

Money Money::operator - () const
{
	Money X;
	X.set_sum(0, 0, 0, -get_sum());
	return Money(X); // Унарный минус
}

Money Money::operator += (const Money& x) // Сложение с присвоением
{
	Money money(*this);
	sum += x.get_sum();
	set_sum(0, 0, 0, sum);
	return money;
}

Money Money::operator -= (const Money& x) // Вычитание с присвоением
{
	Money money(*this);
	sum -= x.get_sum();
	set_sum(0, 0, 0, sum);
	return money;
}

bool Money::operator == (const Money& x) const
{
	if (get_sum() == x.get_sum()) // Сравнение (равно)
		return true;
	else
		return false;
}

ostream& operator << (ostream& s, const Money& x)
{
	if (x.sum % 2 == 1 || x.sum % 2 == -1) // Случай, когда у нас дробное количество пенсов
	{
		if (((x.sum / 2) % 12) == 0) // Если количество полных пенсов равно нулю, то...
		{
			if ((x.sum / 24) % 20 == 0) // Если количество шиллингов равно нулю, то...
			{
				if (x.sum / 480 == 0) // Если при этом еще и количество фунтов равно нулю, то...
				{
					if (x.sum < 0) // Проверяем знак
					{
						s << "-0,5p."; // Выводим 0,5 пенса (1)
					}
					else
					{
						s << "0,5p."; // Выводим 0,5 пенса (2)
					}
				}
				else // Если же при этом количество фунтов нулю не равно, то...
				{
					if (x.sum < 0) // Проверяем знак
					{
						s << "-" << x.sum / 480 * (-1) << "pd.0,5p."; // Выводим фунты и 0,5 пенса (3)
					}
					else
					{
						s << x.sum / 480 << "pd.0,5p."; // Выводим фунты и 0,5 пенса (4)
					}
				}
			}
			else if (x.sum / 480 == 0) // Если же количество фунтов равно нулю, то...
			{
				if (x.sum < 0) // Проверяем знак
				{
					s << "-" << (x.sum / 24) % 20 * (-1) << "sh.0,5p."; // Выводим шиллинги и 0,5 пенса (5)
				}
				else
				{
					s << (x.sum / 24) % 20 << "sh.0,5p."; // Выводим шиллинги и 0,5 пенса (6)
				}
			}
			else // Иначе же...
			{
				if (x.sum < 0) // Проверяем знак
				{
					s << "-" << x.sum / 480 * (-1) << "pd." << (x.sum / 24) % 20 * (-1) << "sh.0,5p."; // Выводим фунты, шиллинги и 0,5 пенса (7)
				}
				else
				{
					s << x.sum / 480 << "pd." << (x.sum / 24) % 20 << "sh.0,5p."; // Выводим фунты, шиллинги и 0,5 пенса (8)
				}
			}
		}
		else if ((x.sum / 24) % 20 == 0) // Если же количество шиллингов равно нулю, то...
		{
			if (x.sum / 480 == 0) // Если количество фунтов равно нулю, то...
			{
				if (x.sum < 0) // Проверяем знак
				{
					s << "-" << ((x.sum / 2) % 12) * (-1) << ",5p."; // Выводим все полные пенсы и 0,5 пенса (9)
				}
				else
				{
					s << ((x.sum / 2) % 12) << ",5p."; // Выводим все полные пенсы и 0,5 пенса (10)
				}
			}
			else // Если же количество фунтов нулю не равно, то...
			{
				if (x.sum < 0) // Проверяем знак
				{
					s << "-" << x.sum / 480 * (-1) << "pd." << ((x.sum / 2) % 12) * (-1) << ",5p."; // Выводим фунты, все полные пенсы и 0,5 пенса (11)
				}
				else
				{
					s << x.sum / 480 << "pd." << ((x.sum / 2) % 12) << ",5p."; // Выводим фунты, все полные пенсы и 0,5 пенса (12)
				}		
			}
		}
		else if (x.sum / 480 == 0) // если же количество фунтов равно нулю, то...
		{
			if (x.sum < 0) // Проверяем знак
			{
				s << "-" << (x.sum / 24) % 20 * (-1) << "sh." << ((x.sum / 2) % 12) * (-1) << ",5p."; // Выводим шиллинги, все полные пенсы и 0,5 пенса (13)
			}
			else
			{
				s << (x.sum / 24) % 20 << "sh." << ((x.sum / 2) % 12) << ",5p."; // Выводим шиллинги, все полные пенсы и 0,5 пенса (14)
			}
		}
		else
		{
			if (x.sum < 0) // Проверяем знак
			{
				s << "-" << x.sum / 480 * (-1) << "pd." << (x.sum / 24) % 20 * (-1) << "sh." << ((x.sum / 2) % 12) * (-1) << ",5p."; // Выводим все (15)
			}
			else
			{
				s << x.sum / 480 << "pd." << (x.sum / 24) % 20 << "sh." << ((x.sum / 2) % 12) << ",5p."; // Выводим все (16)
			}
		}
	}
	else // Случай, когда у нас целое (не дробное) количество пенсов
	{
		if (((x.sum / 2) % 12) == 0) // Если количество пенсов равно нулю, то...
		{
			if ((x.sum / 24) % 20 == 0) // Если количество шиллингов равно нулю, то...
			{
				if (x.sum / 480 == 0) // Если при этом и количество фунтов равно нулю, то...
				{
					s << "0p."; // Выводим 0 пенсов (17) Заметим, что здесь проверку на знак делать не нужно
				}
				else // Если же при этом количество фунтов нулю не равно, то...
				{
					if (x.sum < 0) // Проверяем знак
					{
						s << "-" << x.sum / 480 * (-1) << "pd."; // Выводим фунты (18)
					}
					else
					{
						s << x.sum / 480 << "pd."; // Выводим фунты (19)
					}
				}
			}
			else if (x.sum / 480 == 0) // Если же количество фунтов равно нулю, то...
			{
				if (x.sum < 0) // Проверяем знак
				{
					s << "-" << (x.sum / 24) % 20 * (-1) << "sh."; // Выводим шиллинги (20)
				}
				else
				{
					s << (x.sum / 24) % 20 << "sh."; // Выводим шиллинги (21)
				}
			}
			else // Иначе же...
			{
				if (x.sum < 0) // Проверяем знак
				{
					s << "-" << x.sum / 480 * (-1) << "pd." << (x.sum / 24) % 20 * (-1) << "sh."; // Выводим и фунты и шиллинги (22)
				}
				else
				{
					s << x.sum / 480 << "pd." << (x.sum / 24) % 20 << "sh."; // Выводим и фунты и шиллинги (23)
				}
			}
		}
		else if ((x.sum / 24) % 20 == 0) // Если же количество шиллингов равно нулю, то...
		{
			if (x.sum / 480 == 0) // Если количество фунтов равно нулю, то...
			{
				if (x.sum < 0) // Проверяем знак
				{
					s << "-" << ((x.sum / 2) % 12) * (-1) << "p."; // Выводим пенсы (24)
				}
				else
				{
					s << ((x.sum / 2) % 12) << "p."; // Выводим пенсы (25)
				}
			}
			else // Если же количество фунтов нулю не равно, то...
			{
				if (x.sum < 0) // Проверяем знак
				{
					s << "-" << x.sum / 480 * (-1) << "pd." << ((x.sum / 2) % 12) * (-1) << "p."; // Выводим фунты и пенсы (26)
				}
				else
				{
					s << x.sum / 480 << "pd." << ((x.sum / 2) % 12) << "p."; // Выводим фунты и пенсы (27)
				}
			}
		}
		else if (x.sum / 480 == 0) // если же количество фунтов равно нулю, то...
		{
			if (x.sum < 0) // Проверяем знак
			{
				s << "-" << (x.sum / 24) % 20 * (-1) << "sh." << ((x.sum / 2) % 12) * (-1) << "p."; // Выводим шиллинги и пенсы (28)
			}
			else
			{
				s << (x.sum / 24) % 20 << "sh." << ((x.sum / 2) % 12) << "p."; // Выводим шиллинги и пенсы (29)
			}
		}
		else
		{
			if (x.sum < 0) // Проверяем знак
			{
				s << "-" << x.sum / 480 * (-1) << "pd." << (x.sum / 24) % 20 * (-1) << "sh." << ((x.sum / 2) % 12) * (-1) << "p."; // Выводим все (30)
			}
			else
			{
				s << x.sum / 480 << "pd." << (x.sum / 24) % 20 << "sh." << ((x.sum / 2) % 12) << "p."; // Выводим все (31)
			}
		}
	}
	return s;
}