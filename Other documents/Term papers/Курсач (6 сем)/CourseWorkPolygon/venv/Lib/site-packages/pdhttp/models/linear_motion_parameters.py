# coding: utf-8

"""
    Robot API

    Robot REST API  # noqa: E501

    OpenAPI spec version: 1.8.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pdhttp.models.interpolation_type import InterpolationType  # noqa: F401,E501


class LinearMotionParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interpolation_type': 'InterpolationType',
        'velocity': 'float',
        'acceleration': 'float',
        'uniform': 'bool'
    }

    attribute_map = {
        'interpolation_type': 'interpolationType',
        'velocity': 'velocity',
        'acceleration': 'acceleration',
        'uniform': 'uniform'
    }

    def __init__(self, interpolation_type=None, velocity=None, acceleration=None, uniform=True):  # noqa: E501
        """LinearMotionParameters - a model defined in Swagger"""  # noqa: E501

        self._interpolation_type = None
        self._velocity = None
        self._acceleration = None
        self._uniform = None
        self.discriminator = None

        if interpolation_type is not None:
            self.interpolation_type = interpolation_type
        self.velocity = velocity
        self.acceleration = acceleration
        if uniform is not None:
            self.uniform = uniform

    @property
    def interpolation_type(self):
        """Gets the interpolation_type of this LinearMotionParameters.  # noqa: E501


        :return: The interpolation_type of this LinearMotionParameters.  # noqa: E501
        :rtype: InterpolationType
        """
        return self._interpolation_type

    @interpolation_type.setter
    def interpolation_type(self, interpolation_type):
        """Sets the interpolation_type of this LinearMotionParameters.


        :param interpolation_type: The interpolation_type of this LinearMotionParameters.  # noqa: E501
        :type: InterpolationType
        """

        self._interpolation_type = interpolation_type

    @property
    def velocity(self):
        """Gets the velocity of this LinearMotionParameters.  # noqa: E501

        Cartesian velocity in meters per second  # noqa: E501

        :return: The velocity of this LinearMotionParameters.  # noqa: E501
        :rtype: float
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this LinearMotionParameters.

        Cartesian velocity in meters per second  # noqa: E501

        :param velocity: The velocity of this LinearMotionParameters.  # noqa: E501
        :type: float
        """
        if velocity is None:
            raise ValueError("Invalid value for `velocity`, must not be `None`")  # noqa: E501

        self._velocity = velocity

    @property
    def acceleration(self):
        """Gets the acceleration of this LinearMotionParameters.  # noqa: E501

        Cartesian acceleration in meters per second squared  # noqa: E501

        :return: The acceleration of this LinearMotionParameters.  # noqa: E501
        :rtype: float
        """
        return self._acceleration

    @acceleration.setter
    def acceleration(self, acceleration):
        """Sets the acceleration of this LinearMotionParameters.

        Cartesian acceleration in meters per second squared  # noqa: E501

        :param acceleration: The acceleration of this LinearMotionParameters.  # noqa: E501
        :type: float
        """
        if acceleration is None:
            raise ValueError("Invalid value for `acceleration`, must not be `None`")  # noqa: E501

        self._acceleration = acceleration

    @property
    def uniform(self):
        """Gets the uniform of this LinearMotionParameters.  # noqa: E501

        If set then use uniform movement  # noqa: E501

        :return: The uniform of this LinearMotionParameters.  # noqa: E501
        :rtype: bool
        """
        return self._uniform

    @uniform.setter
    def uniform(self, uniform):
        """Sets the uniform of this LinearMotionParameters.

        If set then use uniform movement  # noqa: E501

        :param uniform: The uniform of this LinearMotionParameters.  # noqa: E501
        :type: bool
        """

        self._uniform = uniform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinearMotionParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinearMotionParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
