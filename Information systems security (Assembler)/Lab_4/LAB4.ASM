.MODEL SMALL
.STACK 400h
.DATA

EXE_PATH DB 1024 DUP (0)
PSWD_DATA DW 06568h, 06553h, 06868h, 06548h, 06565h, 06849h, 06868h, 06553h
	DW 06565h, 06854h ; Password: S, H, I, S, T
PSWD_DATA_SIZE = $ - PSWD_DATA
MY_PSWD DB 255, 0, 256 DUP (0)
NULL_BYTE DB 0
SUCCESS_MESSAGE DB "Ай-да, Имярек, ай-да...$"
FAIL_MESSAGE DB "Goodbye, my love goodbye$"
RAND_NUM DW 0
APPROACHES DB 3
INVITE_MESSAGE DB "Enter your password", 0Dh, 0Ah, "Attempts left: "
INVITE_NUM DB " "
DB 0Dh, 0Ah, "$"

.CODE

MIX_PASTA:
    PUSH ES
    XOR AX, AX
    MOV ES, AX
    PUSHF
    CALL DWORD PTR ES:[68h]
    MOV RAND_NUM, DX
    POP ES
    RET

RAND_16_BITS_NUM:
    MOV AX, 25173
    MUL WORD PTR RAND_NUM
    ADD AX, 13849
    MOV RAND_NUM, AX
    RET

LOOP_RAND_16_NUMS:
    CALL RAND_16_BITS_NUM
    MOV CX, AX
    CALL RAND_16_BITS_NUM
    TEST AX, 1
    JNZ .RAND_16_NUMS_START                 
    MOV CH, CL
.RAND_16_NUMS_START:
    XOR CH, CH
.RAND_16_NUMS_ON_LOOP:
    CALL RAND_16_BITS_NUM
    ROR AX, CL
    LOOP .RAND_16_NUMS_ON_LOOP
    RET

PASTA:
    JMP .PASTA_2_1
.PASTA_2_3:
    MOV AH, AL
    JMP .PASTA_2_4
.PASTA_2_7:
    OR AL, 12h
    AND AL, 0FEh
    JNZ .PASTA_2_8
.PASTA_2_4:
    XOR AL, 73h
    SHL AX, 8
    JMP .PASTA_2_5
.PASTA_2_1:
    MOV AX, 0DEh
    JMP .PASTA_2_2
.PASTA_2_9:
    XOR AL, 51h
    JNE .PASTA_2_10
.PASTA_2_8:
    MOV AH, AL
    JMP .PASTA_2_9
.PASTA_2_5:
.PASTA_2_6:
    JMP .PASTA_2_7
.PASTA_2_2:
    JMP .PASTA_2_3
.PASTA_2_10:
    RET                            

CHOOSE_RAND_METHOD:
    CALL RAND_16_BITS_NUM
    XOR DX, DX
    MOV CX, 3
    DIV CX
    TEST DX, DX
    JZ .CRM_EXIT
    TEST DX, 1
    JNZ .CRM_PASTA
    CALL LOOP_RAND_16_NUMS
    JMP .CRM_EXIT
.CRM_PASTA:
    CALL PASTA
.CRM_EXIT:
    RET

LOAD_EXE_PATH:
	PUSH ES
	PUSH SI
	PUSH DI
	MOV ES, ES:[002Ch]
	XOR SI, SI
	MOV AL, 0FFh
.LEP_GET_0001h:
	MOV AH, ES:[SI]
	CMP AX, 1
	JE .LEP_0001h_GOT
	INC SI
	MOV AL, AH
	JMP .LEP_GET_0001h
.LEP_0001h_GOT:		
	INC SI
	LEA DI, EXE_PATH
.LEP_NAME_COPYING:
	MOV AL, ES:[SI]
	INC SI
	MOV DS:[DI], AL
	INC DI
	TEST AL, AL
	JNZ .LEP_NAME_COPYING
	POP DI
   	POP SI
	POP ES
	RET

DEBUGGER_CHECK:
	PUSH ES                              
	PUSH BX
    CALL CHOOSE_RAND_METHOD
	XOR AX, AX
	MOV ES, AX
	MOV BX, ES:[0Ch]
	MOV AX, ES:[0Eh]
	MOV ES, AX
	CMP BYTE PTR ES:[BX], 50h
	JNE .DC_IF_NO_DEBUG
	STC
	JMP .CD_EXIT
.DC_IF_NO_DEBUG:
	CLC
.CD_EXIT:
	POP BX
	POP ES
	RET
	
LOAD_EXE:
	LEA DX, EXE_PATH
	MOV AX, 4300h
	INT 21h
	AND CL, 0FEh
	MOV AX, 4301h
	INT 21h
	MOV AX, 3D02h
	INT 21h		
	RET
	
GET_FILE_SIZE:
	XOR CX, CX
	XOR DX, DX
	MOV AX, 4201h
	INT 21h
	PUSH AX
	MOV AX, 4202h
	INT 21h
	POP CX
	PUSH AX
	MOV AX, 4200h
	INT 21h
	POP CX
	RET

FILE_CLOSE:
	MOV AH, 3Eh
	INT 21h
	RET

DELETE_EXE_FILE:
   	LEA DX, EXE_PATH
   	MOV AH, 41h
   	INT 21h
	RET

DEFINE_SYMB:
    PUSH AX
    CALL CHOOSE_RAND_METHOD
    POP AX
	XOR AL, BH
	MOV CL, 80h
	XOR DL, DL
.DS_LOOP:
	TEST AL, CL
	JZ .DS_LOOP_ON
	INC DL
.DS_LOOP_ON:
	SHR CL, 1
	TEST CL, CL
	JNZ .DS_LOOP
	TEST DL, 1
	JNZ .DS_USE_BL
	XOR AL, AH
	JMP .DS_EXIT
.DS_USE_BL:
	XOR AL, bl
.DS_EXIT:	
	RET

PSWD_COMPARE:
	PUSH SI
	PUSH DI
	LEA SI, PSWD_DATA
	LEA DI, MY_PSWD+2		
	MOV CX, PSWD_DATA_SIZE
    SHR CX, 2
	CLD
	PUSH ES
	PUSH DS
	POP ES
.COMPARE_LOOP:
	LODSW
	MOV BX, AX
    LODSW
	PUSH CX
    CALL DEFINE_SYMB
   	POP CX
    SCASB
    JNE .COMPARE_LOOP_STOP
    LOOP .COMPARE_LOOP
.COMPARE_LOOP_STOP:    
	POP ES
	TEST CX, CX
	JZ .SUCCESS_COMPARE
	STC
	JMP .COMPARE_EXIT
.SUCCESS_COMPARE:
	CLC
.COMPARE_EXIT:								
	POP DI
	POP SI
	RET

OUTPUT_STR: 
	MOV AH, 09h
	INT 21h
	RET

OUTPUT_INVITATION:
	MOV AL, APPROACHES
	ADD AL, 30h
	MOV INVITE_NUM, AL
	LEA DX, INVITE_MESSAGE
    JMP OUTPUT_STR
	
READ_FROM_KEYBOARD:
	PUSH DI
	LEA DX, MY_PSWD
	MOV AH, 0Ah
	INT 21h
	LEA DI, MY_PSWD+2
	MOV AL, MY_PSWD+1
	XOR AH, AH
	ADD DI, AX
	MOV BYTE PTR [DI], 0
	POP DI
	RET

UPDATE_APPROACHES:
	CALL LOAD_EXE
	MOV BX, AX
	CALL GET_FILE_SIZE
	SUB CX, 29h
	MOV DX, CX
	XOR CX, CX			
	MOV AX, 4200h
	INT 21h
	LEA DX, APPROACHES
	MOV CX, 1
	MOV AH, 40h
	INT 21h
	RET
                   
DESTROY_SELF:
	PUSH SI
	CALL LOAD_EXE
	MOV BX, AX
	CALL GET_FILE_SIZE
	LEA DX, NULL_BYTE	
	MOV SI, CX
	MOV CX, 1
.DS_NULLABLE_FILE:
	MOV AH, 40h
	INT 21h
	DEC SI
	JNZ .DS_NULLABLE_FILE    
	CALL FILE_CLOSE
	CALL DELETE_EXE_FILE
   	POP SI
	RET

START:
	MOV AX, @DATA
	MOV DS, AX
	CALL MIX_PASTA
    CALL LOAD_EXE_PATH
	CALL DEBUGGER_CHECK
	JNC .S_PSWD_CHECK
	JMP .S_FAIL
.S_PSWD_CHECK:
	CALL OUTPUT_INVITATION
	CALL READ_FROM_KEYBOARD
	CALL PSWD_COMPARE
	JNC .S_PSWD_CONFIRMED
	DEC APPROACHES
	CALL UPDATE_APPROACHES
	CMP BYTE PTR APPROACHES, 0
	JNZ .S_PSWD_CHECK
	JMP .S_FAIL
.S_PSWD_CONFIRMED:
	LEA DX, SUCCESS_MESSAGE
    CALL OUTPUT_STR
    MOV BYTE PTR APPROACHES, 3
	CALL UPDATE_APPROACHES
    JMP .S_EXIT
.S_FAIL:
    LEA DX, FAIL_MESSAGE
    CALL OUTPUT_STR
    CALL DESTROY_SELF
.S_EXIT:	
	MOV AX, 4C00h
	INT 21h
END START
