# coding: utf-8

"""
    Robot API

    Robot REST API  # noqa: E501

    OpenAPI spec version: 1.8.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pdhttp.api_client import ApiClient


class StatusApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def status(self, **kwargs):  # noqa: E501
        """Getting the actual robot status  # noqa: E501

        The function returns the actual state of the robotic arm - whether it is initializing, or twisted, or running (in motion), or active (not in motion), or in the zero gravity mode, or failed (broken, failed initializing or in emergency).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SystemState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.status_with_http_info(**kwargs)  # noqa: E501
            return data

    def status_with_http_info(self, **kwargs):  # noqa: E501
        """Getting the actual robot status  # noqa: E501

        The function returns the actual state of the robotic arm - whether it is initializing, or twisted, or running (in motion), or active (not in motion), or in the zero gravity mode, or failed (broken, failed initializing or in emergency).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SystemState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status_failure(self, **kwargs):  # noqa: E501
        """Returns complete list of recent failures  # noqa: E501

        The function returns complete list of recent failures. Each list entry could contain failure message, type, level and datetime. This information could be used for error handling or incident investigation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_failure(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Failure]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_failure_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.status_failure_with_http_info(**kwargs)  # noqa: E501
            return data

    def status_failure_with_http_info(self, **kwargs):  # noqa: E501
        """Returns complete list of recent failures  # noqa: E501

        The function returns complete list of recent failures. Each list entry could contain failure message, type, level and datetime. This information could be used for error handling or incident investigation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_failure_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Failure]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_failure" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/status/failure', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Failure]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status_motion(self, **kwargs):  # noqa: E501
        """Getting the actual motion status  # noqa: E501

        The function returns the actual state of the robotic arm motion - whether it is running (in motion), or idle (not in motion), or in the zero gravity mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_motion(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MotionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_motion_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.status_motion_with_http_info(**kwargs)  # noqa: E501
            return data

    def status_motion_with_http_info(self, **kwargs):  # noqa: E501
        """Getting the actual motion status  # noqa: E501

        The function returns the actual state of the robotic arm motion - whether it is running (in motion), or idle (not in motion), or in the zero gravity mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_motion_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MotionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_motion" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/status/motion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MotionStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status_motors(self, **kwargs):  # noqa: E501
        """Getting the actual status of servo motors  # noqa: E501

        The function returns the actual states of the six servo motors integrated into the joints of the robotic arm. The states are described as arrays of values for the following properties:  - _Angle_ - the actual angular position (in degrees) of the servo's output flange  - _Rotor velocity_ - the actual rotor velocity (in RPM)  - _RMS current_ - the actual input current (in Amperes)  - _Phase current_ - the actual magnitude of alternating current (in Amperes)  - _Supply voltage_ - the actual supply voltage (in Volts)  - _Stator temperature_  - the actual temperature (in degrees C) as measured on the stator winding  - _Servo temperature_ - the actual temperature (in degrees C) as measured on the MCU PCB  - _Velocity setpoint_ - the user-preset rotor velocity (in RPM)  - _Velocity output_ - the motor control current (in Amperes) based on the preset velocity  - _Velocity feedback_ - the actual rotor velocity (in RPM)  - _Velocity error_ - the difference between the preset and the actual rotor velocities (in RPM)  - _Position setpoint_ - the user-preset position of the servo flange in degrees  - _Position output_ - rotor velocity (in RPM) based on the position setpoint  - _Position feedback_ - the actual position of the servo flange (in degrees) based on   the encoder feedback  - _Position error_ - the difference (in degrees) between the preset and the actual positions   of the servo flange   Each property in an array has six values - one for each of the six servos in the arm joints.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_motors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MotorStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_motors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.status_motors_with_http_info(**kwargs)  # noqa: E501
            return data

    def status_motors_with_http_info(self, **kwargs):  # noqa: E501
        """Getting the actual status of servo motors  # noqa: E501

        The function returns the actual states of the six servo motors integrated into the joints of the robotic arm. The states are described as arrays of values for the following properties:  - _Angle_ - the actual angular position (in degrees) of the servo's output flange  - _Rotor velocity_ - the actual rotor velocity (in RPM)  - _RMS current_ - the actual input current (in Amperes)  - _Phase current_ - the actual magnitude of alternating current (in Amperes)  - _Supply voltage_ - the actual supply voltage (in Volts)  - _Stator temperature_  - the actual temperature (in degrees C) as measured on the stator winding  - _Servo temperature_ - the actual temperature (in degrees C) as measured on the MCU PCB  - _Velocity setpoint_ - the user-preset rotor velocity (in RPM)  - _Velocity output_ - the motor control current (in Amperes) based on the preset velocity  - _Velocity feedback_ - the actual rotor velocity (in RPM)  - _Velocity error_ - the difference between the preset and the actual rotor velocities (in RPM)  - _Position setpoint_ - the user-preset position of the servo flange in degrees  - _Position output_ - rotor velocity (in RPM) based on the position setpoint  - _Position feedback_ - the actual position of the servo flange (in degrees) based on   the encoder feedback  - _Position error_ - the difference (in degrees) between the preset and the actual positions   of the servo flange   Each property in an array has six values - one for each of the six servos in the arm joints.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_motors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MotorStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_motors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/status/motors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MotorStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
