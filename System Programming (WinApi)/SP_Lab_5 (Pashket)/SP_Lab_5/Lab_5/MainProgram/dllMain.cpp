#include <stdio.h>
#include <windows.h>
#include "..\Functional\functional.h" // Неявное подключение DLL
#pragma comment (lib, "functional.lib") // Передача линкеру так называемой библиотеки импорта, в которой есть доступ ко всем переменным и функциям нашей DLL

int main()
{
	bool menu, choosing;
	int choice;
	menu = true;
	while (menu)
	{
		printf("%s\n", "Menu:");
		printf("%s\n", "1 - Load plugins");
		printf("%s\n", "2 - Unload plugins");
		printf("%s\n", "3 - Show info about loaded plugins");
		printf("%s\n", "4 - Execute plugins");
		printf("%s\n", "5 - Clean console");
		printf("%s\n", "6 - Exit");

		choosing = true;

		while (choosing) {

			printf("%s", "Your choice: ");
			scanf_s("%d", &choice);

			switch (choice)
			{
			case 1:
				LoadPlugins();
				choosing = false;
				break;
			case 2:
				UnloadPlugins();
				choosing = false;
				break;
			case 3:
				ShowInfo();
				choosing = false;
				break;
			case 4:
				RunPlugins();
				choosing = false;
				break;
			case 5:
				system("cls");
				choosing = false;
				break;
			case 6:
				Exit();
				choosing = false;
				menu = false;
				break;
			default:
				printf("%s\n\n", "Incorrect choose.");
				break;
			}
		}
	}

	system("pause>>NUL");
	return 0;
}
// КОНСПЕКТ

//Неявное связывание, или связывание во время загрузки(load - time linking) является простейшей из двух методик связывания.
//Порядок действий в случае использования Microsoft C++ следующий:
//1. После того как собраны все необходимые для новой DLL функции, осуществляется сборка DLL, а не, например, консольного приложения.
//2. В процессе сборки создается библиотечный.
//LIB - файл, играющий роль заглушки(stub) для фактического кода.Этот файл должен помещаться в каталог библиотек общего пользования, указанный в проекте.
//Явное связывание
//Явное связывание, или связывание во время выполнения(run - time linking), требует, чтобы в программе содержались конкретные указания относительно того,
//когда именно необходимо загрузить или освободить библиотеку DLL.Далее программа получает адрес запрошенной точки входа и использует этот адрес в качестве
//указателя при вызове функции.В вызывающей программе функция не объявляется; вместо этого в качестве указателя на функцию объявляется переменная.
//Поэтому во время компоновки программы присутствие библиотеки не является обязательным.Для выполнения необходимых операций требуются три функции:
//LoadLibrary(или LoadLibraryEx), GetProcAddress и FreeLibrary.На 16 - битовое происхождение определений функций указывает присутствие в них дальних(far)
//указателей и дескрипторов различных типов.
//Для загрузки библиотеки служат две функции : LoadLibrary и LoadLibraryEx.
//Подключаем явным связыванием dll через loadlibrary и потом получаем указатели на функцию через GetProcAddress.
//Статическая библиотека(или ещё «архив») состоит из подпрограмм, которые непосредственно компилируются и линкуются с вашей программой.
//При компиляции программы, которая использует статическую библиотеку, весь функционал статической библиотеки(тот, что использует ваша программа) 
//становится частью вашего исполняемого файла.В Windows статические библиотеки имеют расширение.lib(от «library»), 
//тогда как в Linux статически библиотеки имеют расширение.a(от «archive»).
//Одним из преимуществ статических библиотек является то, что вам нужно распространять всего лишь 1 файл(исполняемый файл), 
//дабы пользователи могли запустить и использовать вашу программу.Поскольку статические библиотеки становятся частью вашей программы, 
//то вы можете использовать их подобно функционалу своей собственной программы.С другой стороны, поскольку копия библиотеки становится 
//частью каждого вашего исполняемого файла, то это может привести к увеличению размера файла.
//Также, если вам нужно будет обновить статическую библиотеку, вам придётся перекомпилировать каждый исполняемый файл, который её использует.
//зачем нужны lib файлы у DLL
//Особенность некоторых линкеров(например, майкрософтовского).
//Они не умеют то ли оставлять имена функций в библиотеке, то ли извлекать их оттуда, поэтому вместе с библиотекой таскают еще и библиотеку импорта.
//__declspec (dllexport) сообщает компоновщику, что вы хотите, чтобы этот объект был доступен для импорта другими DLL.Он используется при создании DLL,
//на которую могут ссылаться другие.
//__declspec (dllimport) импортирует реализацию из DLL, чтобы ваше приложение могло ее использовать.