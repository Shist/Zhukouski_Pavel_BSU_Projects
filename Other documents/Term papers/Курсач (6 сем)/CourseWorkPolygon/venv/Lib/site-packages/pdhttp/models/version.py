# coding: utf-8

"""
    Robot API

    Robot REST API  # noqa: E501

    OpenAPI spec version: 1.8.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Version(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'motors_version': 'list[str]',
        'safety_version': 'str',
        'usb_can_version': 'str',
        'wrist_version': 'str'
    }

    attribute_map = {
        'motors_version': 'motorsVersion',
        'safety_version': 'safetyVersion',
        'usb_can_version': 'usbCanVersion',
        'wrist_version': 'wristVersion'
    }

    def __init__(self, motors_version=None, safety_version=None, usb_can_version=None, wrist_version=None):  # noqa: E501
        """Version - a model defined in Swagger"""  # noqa: E501

        self._motors_version = None
        self._safety_version = None
        self._usb_can_version = None
        self._wrist_version = None
        self.discriminator = None

        if motors_version is not None:
            self.motors_version = motors_version
        if safety_version is not None:
            self.safety_version = safety_version
        if usb_can_version is not None:
            self.usb_can_version = usb_can_version
        if wrist_version is not None:
            self.wrist_version = wrist_version

    @property
    def motors_version(self):
        """Gets the motors_version of this Version.  # noqa: E501


        :return: The motors_version of this Version.  # noqa: E501
        :rtype: list[str]
        """
        return self._motors_version

    @motors_version.setter
    def motors_version(self, motors_version):
        """Sets the motors_version of this Version.


        :param motors_version: The motors_version of this Version.  # noqa: E501
        :type: list[str]
        """

        self._motors_version = motors_version

    @property
    def safety_version(self):
        """Gets the safety_version of this Version.  # noqa: E501


        :return: The safety_version of this Version.  # noqa: E501
        :rtype: str
        """
        return self._safety_version

    @safety_version.setter
    def safety_version(self, safety_version):
        """Sets the safety_version of this Version.


        :param safety_version: The safety_version of this Version.  # noqa: E501
        :type: str
        """

        self._safety_version = safety_version

    @property
    def usb_can_version(self):
        """Gets the usb_can_version of this Version.  # noqa: E501


        :return: The usb_can_version of this Version.  # noqa: E501
        :rtype: str
        """
        return self._usb_can_version

    @usb_can_version.setter
    def usb_can_version(self, usb_can_version):
        """Sets the usb_can_version of this Version.


        :param usb_can_version: The usb_can_version of this Version.  # noqa: E501
        :type: str
        """

        self._usb_can_version = usb_can_version

    @property
    def wrist_version(self):
        """Gets the wrist_version of this Version.  # noqa: E501


        :return: The wrist_version of this Version.  # noqa: E501
        :rtype: str
        """
        return self._wrist_version

    @wrist_version.setter
    def wrist_version(self, wrist_version):
        """Sets the wrist_version of this Version.


        :param wrist_version: The wrist_version of this Version.  # noqa: E501
        :type: str
        """

        self._wrist_version = wrist_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Version, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Version):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
