-- Запрос 1
-- Добавьте в таблицу SALARY столбец TAX (налог) для вычисления ежемесячного подоходного налога на зарплату по прогрессивной шкале. Налог вычисляется по следующему правилу: 
-- налог равен 9% от начисленной  в месяце зарплаты, если суммарная зарплата с начала года до конца рассматриваемого месяца не превышает 20 000;
-- налог равен 12% от начисленной  в месяце зарплаты, если суммарная зарплата с начала года до конца рассматриваемого месяца больше 20 000, но не превышает 30 000;
-- налог равен 15% от начисленной  в месяце зарплаты, если суммарная зарплата с начала года до конца рассматриваемого месяца  больше 30 000.
ALTER TABLE SALARY ADD (TAX NUMBER(15));


-- Запрос 2
-- Составьте программу вычисления налога и вставки её в таблицу SALARY:
-- a) с помощью простого цикла (loop) с курсором и оператора if;
DECLARE
    TAX_VALUE FLOAT;
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY FOR UPDATE OF TAX;
    ROW_SALARY_INFO CUR_SALARY_INFO%ROWTYPE;
BEGIN
    OPEN CUR_SALARY_INFO;
    LOOP
        FETCH CUR_SALARY_INFO INTO ROW_SALARY_INFO;
        EXIT WHEN CUR_SALARY_INFO%NOTFOUND;
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        IF SUMSALARY < 20000 THEN
            TAX_VALUE := 0.09;
        ELSIF SUMSALARY < 30000 THEN
            TAX_VALUE := 0.12;
        ELSE
           TAX_VALUE := 0.15;
        END IF;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * TAX_VALUE
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    CLOSE CUR_SALARY_INFO;
    COMMIT;
END TAX_COUNT_WITH_CURSOR_LOOP_IF;

-- b) с помощью простого цикла (loop) с курсором и оператора case;
DECLARE
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY FOR UPDATE OF TAX;
    ROW_SALARY_INFO CUR_SALARY_INFO%ROWTYPE;
BEGIN
    OPEN CUR_SALARY_INFO;
    LOOP
        FETCH CUR_SALARY_INFO INTO ROW_SALARY_INFO;
        EXIT WHEN CUR_SALARY_INFO%NOTFOUND;
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN 0.09
                WHEN SUMSALARY < 30000 THEN 0.12
                ELSE 0.15
            END)
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    CLOSE CUR_SALARY_INFO;
    COMMIT;
END TAX_COUNT_WITH_CURSOR_CASE;

-- c) с помощью курсорного цикла FOR;
DECLARE
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY FOR UPDATE OF TAX;
BEGIN
    FOR ROW_SALARY_INFO IN CUR_SALARY_INFO LOOP
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN 0.09
                WHEN SUMSALARY < 30000 THEN 0.12
                ELSE 0.15
            END)
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    COMMIT;
END TAX_COUNT_WITH_CURSOR_IN_LOOP;

-- d) с помощью курсора с параметром, передавая номер сотрудника, для которого необходимо вычислить налог.
DECLARE
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO(EMPID NUMBER) IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY 
    WHERE EMPNO = EMPID 
    FOR UPDATE OF TAX;
    CURSOR CUR_EMP IS SELECT EMPNO FROM EMP;
BEGIN
    FOR EMP_R IN CUR_EMP LOOP
    FOR ROW_SALARY_INFO IN CUR_SALARY_INFO(EMP_R.EMPNO) LOOP
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN 0.09
                WHEN SUMSALARY < 30000 THEN 0.12
                ELSE 0.15
            END)
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    END LOOP;
    COMMIT;
END TAX_COUNT_WITH_CURSOR_PARAM;


-- Запрос 3
-- Оформите составленные программы в виде процедур.
-- а)
CREATE OR REPLACE PROCEDURE TAX_COUNT_WITH_CURSOR_LOOP_IF IS
    TAX_VALUE FLOAT;
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY FOR UPDATE OF TAX;
    ROW_SALARY_INFO CUR_SALARY_INFO%ROWTYPE;
BEGIN
    OPEN CUR_SALARY_INFO;
    LOOP
        FETCH CUR_SALARY_INFO INTO ROW_SALARY_INFO;
        EXIT WHEN CUR_SALARY_INFO%NOTFOUND;
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        IF SUMSALARY < 20000 THEN
            TAX_VALUE := 0.09;
        ELSIF SUMSALARY < 30000 THEN
            TAX_VALUE := 0.12;
        ELSE
           TAX_VALUE := 0.15;
        END IF;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * TAX_VALUE
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    CLOSE CUR_SALARY_INFO;
    COMMIT;
END TAX_COUNT_WITH_CURSOR_LOOP_IF;

-- b)
CREATE OR REPLACE PROCEDURE TAX_COUNT_WITH_CURSOR_CASE IS
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY FOR UPDATE OF TAX;
    ROW_SALARY_INFO CUR_SALARY_INFO%ROWTYPE;
BEGIN
    OPEN CUR_SALARY_INFO;
    LOOP
        FETCH CUR_SALARY_INFO INTO ROW_SALARY_INFO;
        EXIT WHEN CUR_SALARY_INFO%NOTFOUND;
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN 0.09
                WHEN SUMSALARY < 30000 THEN 0.12
                ELSE 0.15
            END)
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    CLOSE CUR_SALARY_INFO;
    COMMIT;
END TAX_COUNT_WITH_CURSOR_CASE;

-- c)
CREATE OR REPLACE PROCEDURE TAX_COUNT_WITH_CURSOR_IN_LOOP IS
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY FOR UPDATE OF TAX;
BEGIN
    FOR ROW_SALARY_INFO IN CUR_SALARY_INFO LOOP
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN 0.09
                WHEN SUMSALARY < 30000 THEN 0.12
                ELSE 0.15
            END)
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    COMMIT;
END TAX_COUNT_WITH_CURSOR_IN_LOOP

-- d)
CREATE OR REPLACE PROCEDURE TAX_COUNT_WITH_CURSOR_PARAM (EMPID  NUMBER) IS
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO(EMPID NUMBER) IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY 
    WHERE EMPNO = EMPID 
    FOR UPDATE OF TAX;
BEGIN
    FOR ROW_SALARY_INFO IN CUR_SALARY_INFO(EMPID) LOOP
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN 0.09
                WHEN SUMSALARY < 30000 THEN 0.12
                ELSE 0.15
            END)
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    COMMIT;
END TAX_COUNT_WITH_CURSOR_PARAM;


-- Запрос 4
-- Создайте функцию, вычисляющую налог на зарплату за всё время начислений для конкретного сотрудника. В качестве параметров передать процент налога (до 20000, до 30000, выше 30000, номер сотрудника).
CREATE OR REPLACE PROCEDURE COUNT_TAX_FOR_EMP (EMPID  NUMBER, UNDER_20 NUMBER, OVER_20_AND_UNDER_30 NUMBER, OVER_30 NUMBER) IS
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, YEAR, MONTH FROM SALARY
        WHERE EMPNO = EMPID
        FOR UPDATE OF TAX;
    SUMSALARY NUMBER(16);
BEGIN
    FOR ROW_SALARY_INFO IN CUR_SALARY_INFO LOOP
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN UNDER_20
                WHEN SUMSALARY < 30000 THEN OVER_20_AND_UNDER_30
                ELSE OVER_30
            END)
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    COMMIT;

END COUNT_TAX_FOR_EMP;

BEGIN
 COUNT_TAX_FOR_EMP(7369, 0.20, 0.40, 0.75);
END;


-- Запрос 5
-- Создайте подпрограмму, вычисляющую суммарный налог на зарплату сотрудника за всё время начислений. В качестве параметров передать процент налога (до 20000, до 30000, выше 30000, номер сотрудника).
-- Возвращаемое значение – суммарный налог.
CREATE OR REPLACE FUNCTION COUNT_TAX_FOR_EMP_FUNC (EMPID  NUMBER, UNDER_20 NUMBER, OVER_20_AND_UNDER_30 NUMBER, OVER_30 NUMBER) RETURN NUMBER IS
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, YEAR, MONTH FROM SALARY
        WHERE EMPNO = EMPID;
    SUMSALARY NUMBER(16);
    RESULT NUMBER(16);
BEGIN
    RESULT := 0;
    FOR ROW_SALARY_INFO IN CUR_SALARY_INFO LOOP
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;


        RESULT := RESULT + ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN UNDER_20
                WHEN SUMSALARY < 30000 THEN OVER_20_AND_UNDER_30
                ELSE OVER_30
            END);

    END LOOP;
    RETURN RESULT;
END COUNT_TAX_FOR_EMP_FUNC;

SELECT EMPNAME, COUNT_TAX_FOR_EMP_FUNC(EMPNO,  0.20, 0.40, 0.75) AS TAXES FROM EMP;


-- Запрос 6
-- Создайте пакет, включающий в свой состав процедуру вычисления налога для всех сотрудников, процедуру вычисления налогов для отдельного сотрудника, идентифицируемого своим номером, функцию вычисления
-- суммарного налога на зарплату сотрудника за всё время начислений.
CREATE OR REPLACE PACKAGE TAX_UTIL AS
    PROCEDURE TAX_COUNT_FOR_ALL_EMP;
    PROCEDURE TAX_COUNT_FOR_EMP(EMPID  NUMBER);
    FUNCTION COUNT_TAX_FOR_EMP (EMPID  NUMBER, UNDER_20 NUMBER, OVER_20_AND_UNDER_30 NUMBER, OVER_30 NUMBER) RETURN NUMBER;
END TAX_UTIL;
CREATE OR REPLACE PACKAGE BODY TAX_UTIL AS
FUNCTION COUNT_TAX_FOR_EMP (EMPID  NUMBER, UNDER_20 NUMBER, OVER_20_AND_UNDER_30 NUMBER, OVER_30 NUMBER) RETURN NUMBER IS
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, YEAR, MONTH FROM SALARY
        WHERE EMPNO = EMPID;
    SUMSALARY NUMBER(16);
    RESULT NUMBER(16);
BEGIN
    RESULT := 0;
    FOR ROW_SALARY_INFO IN CUR_SALARY_INFO LOOP
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;


        RESULT := RESULT + ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN UNDER_20
                WHEN SUMSALARY < 30000 THEN OVER_20_AND_UNDER_30
                ELSE OVER_30
            END);

    END LOOP;
    RETURN RESULT;
END COUNT_TAX_FOR_EMP;

PROCEDURE TAX_COUNT_FOR_EMP (EMPID  NUMBER) IS
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO(EMPID NUMBER) IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY 
    WHERE EMPNO = EMPID 
    FOR UPDATE OF TAX;
BEGIN
    FOR ROW_SALARY_INFO IN CUR_SALARY_INFO(EMPID) LOOP
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN 0.09
                WHEN SUMSALARY < 30000 THEN 0.12
                ELSE 0.15
            END)
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    COMMIT;
END TAX_COUNT_FOR_EMP;

PROCEDURE TAX_COUNT_FOR_ALL_EMP IS
    SUMSALARY NUMBER(16);
    CURSOR CUR_SALARY_INFO IS SELECT EMPNO, SALVALUE, TAX, MONTH, YEAR FROM SALARY FOR UPDATE OF TAX;
BEGIN
    FOR ROW_SALARY_INFO IN CUR_SALARY_INFO LOOP
        SELECT SUM(SALVALUE) INTO SUMSALARY FROM SALARY s
            WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH <= ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

        UPDATE SALARY s
        SET TAX = ROW_SALARY_INFO.SALVALUE * (CASE
                WHEN SUMSALARY < 20000 THEN 0.09
                WHEN SUMSALARY < 30000 THEN 0.12
                ELSE 0.15
            END)
        WHERE s.EMPNO = ROW_SALARY_INFO.EMPNO AND s.MONTH = ROW_SALARY_INFO.MONTH AND s.YEAR = ROW_SALARY_INFO.YEAR;

    END LOOP;
    COMMIT;
END TAX_COUNT_FOR_ALL_EMP;

END TAX_UTIL;


-- Запрос 7
-- Создайте триггер, действующий при обновлении данных в таблице SALARY. А именно, если происходит обновление поля SALVALUE, то при назначении новой зарплаты,
-- меньшей чем должностной оклад (таблица JOB, поле MINSALARY), изменение не вносится  и сохраняется старое значение, если новое значение зарплаты больше должностного оклада, то изменение вносится.
CREATE OR REPLACE TRIGGER CHECK_SALARY
    BEFORE UPDATE OF SALVALUE ON SALARY
    FOR EACH ROW
DECLARE
    CURSOR CUR_MINSALARY(EMPID CAREER.EMPNO%TYPE) IS
        SELECT MINSALARY FROM JOB
            WHERE JOBNO IN (SELECT JOBNO FROM CAREER WHERE EMPID = EMPNO AND ENDDATE IS NULL);
    MINSALARY_VALUE JOB.MINSALARY%TYPE;
BEGIN
    OPEN CUR_MINSALARY(:NEW.EMPNO);
    FETCH CUR_MINSALARY INTO MINSALARY_VALUE;
    IF :NEW.SALVALUE < MINSALARY_VALUE THEN
        :NEW.SALVALUE := :OLD.SALVALUE;
    END IF;
    CLOSE CUR_MINSALARY;
END CHECK_SALARY;

SELECT * FROM SALARY
WHERE EMPNO = 7369 AND MONTH = 5 AND YEAR = 2007;

UPDATE SALARY
SET SALVALUE = 100
WHERE EMPNO = 7369 AND MONTH = 5 AND YEAR = 2007;

UPDATE SALARY
SET SALVALUE = 99999
WHERE EMPNO = 7369 AND MONTH = 5 AND YEAR = 2007;


-- Запрос 8
-- Создайте триггер, действующий при удалении записи из таблицы CAREER. Если в удаляемой строке поле ENDDATE содержит NULL, то запись не удаляется, в противном случае удаляется.
CREATE OR REPLACE TRIGGER HANDLE_DELETE_FOR_WORKERS
    BEFORE DELETE ON CAREER
    FOR EACH ROW
    WHEN (OLD.ENDDATE IS NULL)
BEGIN
    RAISE_APPLICATION_ERROR(-20001,'Worker can not be deleted');
END HANDLE_DELETE_FOR_WORKERS;

DELETE FROM CAREER
WHERE ENDDATE IS NULL


-- Запрос 9
-- Создайте триггер, действующий на добавление или изменение данных в таблице EMP. Если во вставляемой или изменяемой строке поле BIRTHDATE содержит NULL, то после вставки или изменения должно быть
-- выдано сообщение ‘BERTHDATE is NULL’. Если во вставляемой или изменяемой строке поле BIRTHDATE содержит дату ранее ‘01-01-1940’, то должно быть выдано сообщение ‘PENTIONA’.
-- Во вновь вставляемой строке имя служащего должно быть приведено к заглавным буквам.
CREATE OR REPLACE TRIGGER ON_EMP_INSERT_OR_UPDATE
    BEFORE INSERT OR UPDATE ON EMP
    FOR EACH ROW
BEGIN
    IF :NEW.BIRTHDATE IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001,'BIRTHDATE is NULL');
    END IF;

    IF :NEW.BIRTHDATE < to_date('01-01-1940', 'dd-mm-yyyy') THEN
        RAISE_APPLICATION_ERROR(-20002, 'PENTIONA');
    END IF;

    :NEW.EMPNAME := UPPER(:NEW.EMPNAME);
END ON_EMP_INSERT_OR_UPDATE;


-- Запрос 10
-- Создайте программу изменения типа заданной переменной из символьного типа (VARCHAR2) в числовой тип (NUMBER).  Программа должна содержать раздел обработки исключений.
-- Обработка должна заключаться в выдаче сообщения ‘ERROR: argument is not a number’ .  Исключительная ситуация возникает при задании строки в виде числа с запятой, разделяющей дробную и целую части.
CREATE OR REPLACE FUNCTION VARCHAR2_TO_NUMBER (str in VARCHAR2) return NUMBER IS
BEGIN
   RETURN CAST(str AS NUMBER);
   EXCEPTION
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20108, 'ERROR: argument is not a number: ' || str);
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20103, 'Unexpected error');
END VARCHAR2_TO_NUMBER;

BEGIN
    DBMS_OUTPUT.PUT_LINE(VARCHAR2_TO_NUMBER( '1234123' ));
    DBMS_OUTPUT.PUT_LINE(VARCHAR2_TO_NUMBER( '5.1' ));
    DBMS_OUTPUT.PUT_LINE(VARCHAR2_TO_NUMBER('4,123'));
END;

